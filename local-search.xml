<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试用例设计</title>
    <link href="/zn-zyl.github.io/2025/02/12/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    <url>/zn-zyl.github.io/2025/02/12/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="测试需求分析"><a href="#测试需求分析" class="headerlink" title="测试需求分析"></a>测试需求分析</h2><p>软件测试需求分析</p><h2 id="1-什么是软件测试需求？"><a href="#1-什么是软件测试需求？" class="headerlink" title="1.什么是软件测试需求？"></a>1.什么是软件测试需求？</h2><p>测试需求就是明确在项目中要测试什么。<br>我们在测试活动中，首先要明确测试需求（what),才能决定怎么测（how)什么时候测（when)需要多少人（who)测试的环境是什么（where),测试中需要的技能，工具以及相应的背景知识，测试中可能遇到的风险等等。</p><h2 id="2-软目件需求分析的的"><a href="#2-软目件需求分析的的" class="headerlink" title="2.软目件需求分析的的"></a>2.软目件需求分析的的</h2><p>测试需求分析的主要目的“获取测试点，根据测试点来编写测试用例</p><ul><li>1.把不直观的需求—–转变为直观的需求（用例图&#x2F;活动图 flow图）<ul><li>a.使得测试范围可以度量（有多少功能，有多少功能项）度量测试范围（规定测试范围）</li><li>b.使得独立的功能点对应的所 有处理分支可以度量 度量独立功能点的功能处理分支（细化独立功能点的功能范围）</li><li>c.使得该系统需要测试的业务场景可以度量    度量业务场景（各种各样的流程图也是各种业务场景）</li></ul></li><li>2.把不明确的需求转变为可度量的需求明确其功能点的输入，处理和输出结果（明确输入—-输出的结果）</li></ul><h2 id="3-如何对软件测试需求分析"><a href="#3-如何对软件测试需求分析" class="headerlink" title="3.如何对软件测试需求分析"></a>3.如何对软件测试需求分析</h2><p>需求分析和测试需求分析的区别?  先需求分析(产品经理）——-测试需求分析（测试人员）</p><p>需求分析：初步设想（客户需求）-需求分析-需求规格：输入，处理和输出（先得到原始需求，由产品经理进行需求分析，然后输出需求规格说明书）</p><p>测试需求分析：单个功能点输入处理输出——-业务流程分析——-全局–（整个系统）——隐式需求挖掘（UI，性能，安全，应用性等)</p><h2 id="4-测试需求分析"><a href="#4-测试需求分析" class="headerlink" title="4.测试需求分析"></a>4.测试需求分析</h2><ul><li>通过分析需求描述中的输入，输出，处理，限制，约束等给出对应的验证内容：（功能测试）</li><li>通过分析各个功能模块之间的业务顺序，和接口之间信息和数据的传递，对存在功能交互的功能项，给出对应的验证内容（功能交互性测试，握手）</li><li>考虑到需求的完整性，要充分考虑隐性需求的验证，比如界面的验证，注册账号的唯一性（界面，易用性，兼容性，安全性，性能）</li><li>根据场景法和错误分析法补充测试案例</li></ul><h4 id="测试点分析步骤："><a href="#测试点分析步骤：" class="headerlink" title="测试点分析步骤："></a>测试点分析步骤：</h4><ul><li>1.正常功能：核心最基本的功能</li><li>2.功能验证：规则：按顺序从上至下，对每一个输入项进行验证</li><li>3.功能交互验证</li><li>4.隐性需求<br>充分熟悉产品业务，挖掘隐性需求。（UI，兼容，性能，安全，易用）</li></ul><h2 id="5-需求的变更"><a href="#5-需求的变更" class="headerlink" title="5.需求的变更"></a>5.需求的变更</h2><p>对于一个存在生命周期的软件产品来说，软件的开发和测试往往都不是一次性的，因为随着新的需求出现，以及对原有版本的改进，新的版本会不断的发布。<br>  我们都面临一个点实际问题：就是软件需求在开发过程中会不断发生变化，有时候到了后期还会有新的需求加进来，或者是发版以后发现原来的需求存在缺陷，之后重新返工，那么我们该如何在最终发布之前，确定需求呢？</p><p>如此我们就必须要考虑软件需求的版本化控制。当要进行一个新版本的迭代时，我们在工作开始之前就确认好本次需求的范围：如实出现需求变更，则根据市场策略，已公布的发布时间，客户需求，实现的代价，难易程度以及对现有工作影响等方面考虑，对需求进行适度划分，严格定义当前版本需要实现的功能，而其他的部分，则作为未来版本的需求<br>总之遵循一个原则，对一个版本的需求版更，必须早发现，早讨论，早决定，早调整。</p><h4 id="以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。"><a href="#以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。" class="headerlink" title="以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。"></a>以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。</h4><p>桌子<br>功能度：桌子能不能放东西。<br>安全性：打造桌子所用的木料有没有毒或者腐烂污染<br>可靠性：杯子从不同高度落下的损坏程度<br>可移植性：桌子在不同的地方、温度等环境下是否都可以正常使用<br>兼容性：桌子能否作为饭桌，书桌，游戏桌子使用。<br>易用性：桌子是否平滑不拉手、桌角是否打磨平整，桌子的高度设置是否符合人体工学标准、是否方便办公<br>用户文档：使用手册是否对桌子的用法、限制、使用条件等有详细描述<br>疲劳测试：将桌子放上100kg重物放24小时检查桌子表面的情况<br>压力测试：在桌子上面不断加重物，看压力多大时桌子会倾斜  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker学习</title>
    <link href="/zn-zyl.github.io/2019/02/12/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/zn-zyl.github.io/2019/02/12/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><p>docker是一个容器，装应用的</p><h2 id="docker和vmvare比较"><a href="#docker和vmvare比较" class="headerlink" title="docker和vmvare比较"></a>docker和vmvare比较</h2><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_12-06-27.png"></p><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_12-11-09.png"></p><h2 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h2><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_12-18-08.png"></p><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_12-21-33.png"></p><ul><li>Docker 汽车引擎</li><li>Dockerfile 汽车图纸</li><li>Images:类似于样板车</li><li>Container:把一些汽车的零件拼接在一起</li><li>Dcoker Compose 老司机    批量运行镜像</li><li>Docker Volume 汽车的邮箱  数据备份</li><li>Docker Swarm 交通枢纽     管理容器</li><li>Docker Register 4s店</li></ul><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>参考文章 <a href="https://www.cnblogs.com/keyou1/p/11511067.html">https://www.cnblogs.com/keyou1/p/11511067.html</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>真正提供服务的是Containers容器</li></ul><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_12-35-18.png"></p><h4 id="获取Images镜像三种方式"><a href="#获取Images镜像三种方式" class="headerlink" title="获取Images镜像三种方式"></a>获取Images镜像三种方式</h4><ul><li>从Docker Register使用docker pull下载镜像到本地，镜像里包含安装所需要的所有资源。</li><li>dockerfile文本文件 私有镜像官方站点没有，自己构建一个镜像，通过dockerfile的一些命令。</li><li>打包别人的安装包压缩包，导入到Images中</li></ul><h4 id="dockerhub地址"><a href="#dockerhub地址" class="headerlink" title="dockerhub地址"></a>dockerhub地址</h4><p><a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a></p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p><img src="/zn-zyl.github.io/../.vuepress/public/picture/Snipaste_2021-06-14_15-50-58.png"></p><h4 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h4><ul><li>docker images 查看已下载镜像</li><li>docker pull centos 下载镜像</li><li>docker pull python:3.7-alpine 下载指定版本镜像</li><li>docker search python 搜索镜像</li><li>docker image rm openjdk  &#x3D; docker rmi -f openjdk 删除镜像  -f强制删除</li><li>docker inspect python:3.7-alpine 查看镜像详细信息</li><li>docker history centos 查看镜像历史信息</li></ul><h4 id="docker-run命令"><a href="#docker-run命令" class="headerlink" title="docker run命令"></a>docker run命令</h4><p>宿主机：docker安装在哪一台阿里云服务器上</p><ul><li>docker run -it python:alpine &#x2F;bin&#x2F;sh  -it和容器进行交互,开启一个python命令行界面</li><li>docker run -it –name my_python python:alpine python  –name自主定义启动的容器名称</li><li>docker run -it -d –name my_python python:alpine python  -d 在后台运行容器</li><li>docker run -it -d –name my_python -p 8000:8012 容器名称 -p端口映射 宿主机的8000端口和容器的80端口做映射后，可以通过8000端口来访问80端口的服务。8000宿主机端口（服务器端口）8012容器当中端口</li><li>docker run -it -d –name my_python -P python:alpine 使用宿主机中的随机端口和容器的80端口做映射</li><li>docker run -it -d –name my_python -v $PWD:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -P python:alpine -v资源共享 宿主机中的&#x2F;目录文件和容器中的目录&#x2F;文件映射共享</li></ul><h4 id="容器相关操作"><a href="#容器相关操作" class="headerlink" title="容器相关操作"></a>容器相关操作</h4><ul><li>docker stop 容器名称&#x2F;ID  将运行的容器停止</li><li>docker restart 容器名称&#x2F;ID 启动容器</li><li>docker pause 容器名称&#x2F;ID 暂停容器</li><li>docker unpause 容器名称&#x2F;ID 启动容器</li><li>docker rm -f 容器名称&#x2F;ID  强制删除正在运行的容器</li><li>docker top 容器名称 查看进程信息</li><li>docker exec -it 容器名称 &#x2F;bin&#x2F;sh 进入正在运行的容器</li><li>docker run –rm 退出后会自动删掉容器 docker run –rm -it –name myweb -P nginx</li><li>docker ps 查看正在提供业务 运行的容器信息</li><li>docker ps -a 查看所有容器信息</li><li>docker stats ngix 查看容器资源利用率</li></ul><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><ul><li>1.docker login 输入用户名密码</li><li>2.docker tag redis 用户名&#x2F;rediszhou 修改tag添加版本信息</li><li>3.docker push 用户名&#x2F;rediszhou 上传镜像</li><li>4.下载镜像 docker pull 用户名&#x2F;rediszhou</li><li>5.导出为压缩文件 docker save -o apitest.tar apitest:latest</li><li>6.导入压缩文件 docker load -i apitest.tar</li></ul><h2 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h2><ul><li>使用数据卷实现数据持久化</li><li>数据备份&#x2F;数据共享</li></ul><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><ul><li>1.创建 docker volume create</li><li>2.查看 docker volume inspect</li><li>3.挂载 docker run -v 宿主机目录：容器目录</li><li>4.删除 docker volume rm</li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile为构建镜像的文本文件</p><ul><li>1.base image基础镜像</li><li>2.往往在一个dockerfile文件中只有一个FROM指令（多阶段构建除外）</li><li>3.镜像名：版本（如果本地没有，会自动去dockerhub中下载）FROM python:alpine</li><li>4.LABEL  指定docker中的元数据信息</li><li>5.maintainer 指定当前Dockerfile文件的维护者(作者)</li><li>6.description指定功能描述信息<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:alpine<br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;zhounuo &lt;744700813@qq.com&gt;&quot;</span></span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> description=<span class="hljs-string">&quot;this is a sample&quot;</span></span><br></code></pre></td></tr></table></figure></li><li>7.相当于cd命令，切换到容器中的某个目录，如果指定的目录不存在，会自动创建<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br></code></pre></td></tr></table></figure></li><li>8.相当于cp命令，将宿主机中的目录或者文件复制粘贴到容器中<ul><li>a.第一个参数为宿主机中目录或者文件（相对路径或绝对路径）相对于dockerfile所属路径</li><li>b.第二个参数为容器中的目录或者文件（相对路径或绝对路径）<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">COPY</span> requirements.txt ./  复制requirements.txt粘贴到 <span class="hljs-keyword">app</span>目录下 = <span class="hljs-keyword">COPY</span> requirements.txt /<span class="hljs-keyword">app</span>/<br><span class="hljs-keyword">COPY</span> requirements.txt ./<span class="hljs-keyword">dir</span>/ 将requirements.txt复制粘贴到<span class="hljs-keyword">app</span>/<span class="hljs-keyword">dir</span>目录下<br><span class="hljs-keyword">COPY</span> requirements.txt ./<span class="hljs-keyword">dir</span> 将requirements.txt复制粘贴到<span class="hljs-keyword">app</span>目录下重命名为<span class="hljs-keyword">dir</span><br></code></pre></td></tr></table></figure></li></ul></li><li>9.ADD<ul><li>a.跟COPY功能类似</li><li>b.如果第二个参数为本地的压缩文件，那么会自动解压，将解压之后的文件复制粘贴到容器</li><li>c.如果第一个参数为远程的路径，那么会自动下载，将下载之后的文件复制粘贴到中期<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">ADD</span> one.zip ./<br></code></pre></td></tr></table></figure></li></ul></li><li>10.RUN 容器中执行linux命令<ul><li>a.–no-cache-dir安装过程中不缓存</li><li>b.RUN指令越多，那么构建出来的镜像层级就越多，镜像尺寸就会越大<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">RUN pip install -i https://pypi.douban.<span class="hljs-keyword">com</span>/simple --<span class="hljs-keyword">no</span>-cache-dir -r requirements.txt &amp;&amp; RUN <span class="hljs-keyword">ls</span> / &amp;&amp; \<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginx<br></code></pre></td></tr></table></figure></li></ul></li><li>11.CMD 在容器运行时会自动执行指令<ul><li>a.与ENTERPOINT类似 ENTERPOINT [“python”,”fun.py”]</li><li>b.exec类型的命令[“指令”,”参数1”,”参数2”]为json数组（必须得使用双引号）</li><li>c.优先使用exec类型的命令</li><li>d.shell类型的命令 CMD python fun.py</li><li>e.如果有多个CMD命令或者ENTERPOINT命令，只会执行最后一个。</li><li>f.如果在容器运行（docker run)有指定命令的话，那么CMD会被忽略,所有CMD往往会作为默认参数。</li><li>g:如果在容器运行（docker run)有指定命令的话，那么ENTERPOINT不会被忽略，命令会作为ENTERPOINT的参数，相当于在列表中追加两个元素 docker run –rm keyou1&#x2F;fun:v1 <a href="http://www.baidu.com相当于/">www.baidu.com相当于</a> ENTERPOINT [“ping”，”<a href="http://www.baidu.com"]">www.baidu.com&quot;]</a></li><li>h.如果ENTERPOINT和CMD一起用，那么CMD会作为ENTERPOINT的默认参数  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">ENTERPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;ping&quot;</span>]</span><br>CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;114.114.114.114&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> . . 将宿主机中当前目录下文件复制粘贴到容器中当前目录下</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-string">&quot;fun.py&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul></li><li>12 ENV 在容器内创建环境变量 左右两侧不要有空格<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ENV <span class="hljs-attribute">username</span>=keyou \<br>    <span class="hljs-attribute">password</span>=123456<br></code></pre></td></tr></table></figure></li><li>13.VOLUME 指定容器运行时需要映射出去的目录（容器中）。然后才能使用-v命令<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">VOLUME</span><span class="language-bash">  /app</span><br></code></pre></td></tr></table></figure></li><li>14.EXPOSE 指定容器运行时需要映射出去的端口号（容器中的端口号）<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure></li><li>15.可以使用如下命令将Dockerfile文件构建成镜像 <ul><li>a.docker build -t 用户名&#x2F;镜像名:版本号 .</li><li>b. .指定为当前路径下寻找Dockerfile</li><li>c.默认文件名为Dockerfile</li><li>d.如果文件名不为Dockerfile，那么可以使用 -f手动指定 docker build -t test -f Dockerfile11 .</li><li>e.构建完后要运行 docker run –rm test<br>-16.可以在shell脚本中启动多个服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># dockerenterpont.sh</span><br><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-built_in">ls</span> /<br><span class="hljs-built_in">cat</span> /etc/passwd<br><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">FROM python:alpine<br><span class="hljs-keyword">COPY</span> dockerenterpont.<span class="hljs-keyword">sh</span> /dockerenterpont.<span class="hljs-keyword">sh</span>  把文件<span class="hljs-keyword">copy</span>到容器<br><span class="hljs-keyword">RUN</span> chmod a+x dockerenterpont.<span class="hljs-keyword">sh</span>   添加执行权限<br>ENTERPOINT[<span class="hljs-string">&quot;/dockerenterpont.sh&quot;</span>]  执行<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h4 id="1-docker0"><a href="#1-docker0" class="headerlink" title="1.docker0"></a>1.docker0</h4><ul><li>默认容器与宿主机之间沟通的桥梁</li></ul><h4 id="2-网络类型"><a href="#2-网络类型" class="headerlink" title="2.网络类型"></a>2.网络类型</h4><ul><li>bridge<ul><li>nat网络模型</li><li>虚拟交换机</li></ul></li><li>host<ul><li>与宿主机共享网络</li><li>–net&#x3D;host</li></ul></li><li>none<ul><li>不配置网络</li><li>–net&#x3D;none</li></ul></li><li>overlay<ul><li>不同网络进行通信<br>与一个容器共享网络 –net&#x3D;container:ContainerName</li></ul></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>docker network create mynet 创建默认docker0网络</li><li>docker network create -d none mynet 创建none类型网络</li><li>docker network inspect mynet 查看网络信息</li><li>docker run –name my_web -d -v $PWD&#x2F;index.html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;index.html –network mynet -P nginx:alpin 加入到特定的网络</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试需求分析</title>
    <link href="/zn-zyl.github.io/2019/02/12/%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <url>/zn-zyl.github.io/2019/02/12/%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="测试需求分析"><a href="#测试需求分析" class="headerlink" title="测试需求分析"></a>测试需求分析</h2><p>软件测试需求分析</p><h2 id="1-什么是软件测试需求？"><a href="#1-什么是软件测试需求？" class="headerlink" title="1.什么是软件测试需求？"></a>1.什么是软件测试需求？</h2><p>测试需求就是明确在项目中要测试什么。<br>我们在测试活动中，首先要明确测试需求（what),才能决定怎么测（how)什么时候测（when)需要多少人（who)测试的环境是什么（where),测试中需要的技能，工具以及相应的背景知识，测试中可能遇到的风险等等。</p><h2 id="2-软目件需求分析的的"><a href="#2-软目件需求分析的的" class="headerlink" title="2.软目件需求分析的的"></a>2.软目件需求分析的的</h2><p>测试需求分析的主要目的“获取测试点，根据测试点来编写测试用例</p><ul><li>1.把不直观的需求—–转变为直观的需求（用例图&#x2F;活动图 flow图）<ul><li>a.使得测试范围可以度量（有多少功能，有多少功能项）度量测试范围（规定测试范围）</li><li>b.使得独立的功能点对应的所 有处理分支可以度量 度量独立功能点的功能处理分支（细化独立功能点的功能范围）</li><li>c.使得该系统需要测试的业务场景可以度量    度量业务场景（各种各样的流程图也是各种业务场景）</li></ul></li><li>2.把不明确的需求转变为可度量的需求明确其功能点的输入，处理和输出结果（明确输入—-输出的结果）</li></ul><h2 id="3-如何对软件测试需求分析"><a href="#3-如何对软件测试需求分析" class="headerlink" title="3.如何对软件测试需求分析"></a>3.如何对软件测试需求分析</h2><p>需求分析和测试需求分析的区别?  先需求分析(产品经理）——-测试需求分析（测试人员）</p><p>需求分析：初步设想（客户需求）-需求分析-需求规格：输入，处理和输出（先得到原始需求，由产品经理进行需求分析，然后输出需求规格说明书）</p><p>测试需求分析：单个功能点输入处理输出——-业务流程分析——-全局–（整个系统）——隐式需求挖掘（UI，性能，安全，应用性等)</p><h2 id="4-测试需求分析"><a href="#4-测试需求分析" class="headerlink" title="4.测试需求分析"></a>4.测试需求分析</h2><ul><li>通过分析需求描述中的输入，输出，处理，限制，约束等给出对应的验证内容：（功能测试）</li><li>通过分析各个功能模块之间的业务顺序，和接口之间信息和数据的传递，对存在功能交互的功能项，给出对应的验证内容（功能交互性测试，握手）</li><li>考虑到需求的完整性，要充分考虑隐性需求的验证，比如界面的验证，注册账号的唯一性（界面，易用性，兼容性，安全性，性能）</li><li>根据场景法和错误分析法补充测试案例</li></ul><h4 id="测试点分析步骤："><a href="#测试点分析步骤：" class="headerlink" title="测试点分析步骤："></a>测试点分析步骤：</h4><ul><li>1.正常功能：核心最基本的功能</li><li>2.功能验证：规则：按顺序从上至下，对每一个输入项进行验证</li><li>3.功能交互验证</li><li>4.隐性需求<br>充分熟悉产品业务，挖掘隐性需求。（UI，兼容，性能，安全，易用）</li></ul><h2 id="5-需求的变更"><a href="#5-需求的变更" class="headerlink" title="5.需求的变更"></a>5.需求的变更</h2><p>对于一个存在生命周期的软件产品来说，软件的开发和测试往往都不是一次性的，因为随着新的需求出现，以及对原有版本的改进，新的版本会不断的发布。<br>  我们都面临一个点实际问题：就是软件需求在开发过程中会不断发生变化，有时候到了后期还会有新的需求加进来，或者是发版以后发现原来的需求存在缺陷，之后重新返工，那么我们该如何在最终发布之前，确定需求呢？</p><p>如此我们就必须要考虑软件需求的版本化控制。当要进行一个新版本的迭代时，我们在工作开始之前就确认好本次需求的范围：如实出现需求变更，则根据市场策略，已公布的发布时间，客户需求，实现的代价，难易程度以及对现有工作影响等方面考虑，对需求进行适度划分，严格定义当前版本需要实现的功能，而其他的部分，则作为未来版本的需求<br>总之遵循一个原则，对一个版本的需求版更，必须早发现，早讨论，早决定，早调整。</p><h4 id="以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。"><a href="#以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。" class="headerlink" title="以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。"></a>以上常用的黑盒用例设计方法，等价类，边界值，错误推测，场景法细化出测试点。</h4><p>桌子<br>功能度：桌子能不能放东西。<br>安全性：打造桌子所用的木料有没有毒或者腐烂污染<br>可靠性：杯子从不同高度落下的损坏程度<br>可移植性：桌子在不同的地方、温度等环境下是否都可以正常使用<br>兼容性：桌子能否作为饭桌，书桌，游戏桌子使用。<br>易用性：桌子是否平滑不拉手、桌角是否打磨平整，桌子的高度设置是否符合人体工学标准、是否方便办公<br>用户文档：使用手册是否对桌子的用法、限制、使用条件等有详细描述<br>疲劳测试：将桌子放上100kg重物放24小时检查桌子表面的情况<br>压力测试：在桌子上面不断加重物，看压力多大时桌子会倾斜  </p>]]></content>
    
    
    <categories>
      
      <category>测试基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
